name: Python tests

on: [ push ]

env:
  PYTHON_VERSION: "3.9"
  POETRY_VERSION: "1.3.2"
  MYSQL_ROOT_PASSWORD: "mypassword"

jobs:
  lint:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint with isort
        uses: isort/isort-action@master
        with:
          isortVersion: "5.12.0"

      - name: Lint with black
        uses: psf/black@stable
        with:
          version: "22.3.0"

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  test-and-coverage:
    runs-on: ubuntu-20.04

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      mysql-db:
        # Docker Hub image
        image: mysql
        # Provide the root password for MySQL
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
        # Map port 3306 from the container to port 3306 on the host
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check docker
        run: |
          docker --version && docker ps -a

      - name: Install dockerize
        run: sudo apt-get update && sudo apt-get install -y wget && wget https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.6.1.tar.gz

      - name: Wait for MySQL to start
        run: dockerize -wait tcp://localhost:3306 -timeout 60s

      - name: Execute SQL script
        run: |
          mysql -h localhost -P 3306 -u root -p${{ env.MYSQL_ROOT_PASSWORD }} < ./backend/scripts/create-database-with-data.sql

#      - name: Run server script
#        run: ./backend/scripts/create-server.sh ${{ secrets.PASSWORD }}
#        shell: bash

      - name: Install Poetry
        run: |
          curl -sL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python - -y

      - name: Configure Poetry
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.in-project true

      - name: Create Env File
        run: |
          echo "${{ secrets.ENV_FILE }}" > backend/.env

      - name: Set up Poetry cache
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Test with Pytest
        run: |
          poetry run pytest

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 7

  build-and-upload:
    needs: [test-and-coverage]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        run: |
          curl -sL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python - -y
      - name: Configure Poetry
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.in-project true

      - name: Set up Poetry cache
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Build
        run: |
          poetry build

      - name: Upload tarball and wheel
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
          if-no-files-found: error

  sonarqube:
    # runs after test-and-coverage job
    needs: test-and-coverage
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Download coverage report artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-report

      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
